{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Laura Chapman\n",
    "# Script for developing statistical tools for Glue\n",
    "# Computes statistics for subsets as well as entire data using compute_statistic\n",
    "# Changed from astropy tables to pandas dataframe\n",
    "\n",
    "# Format data well in a popup using qt\n",
    "# Color code by subset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: W03: w5_psc.vot:11:0: W03: Implicitly generating an ID from a name 'J/ApJ/688/1142/table2' -> 'J_ApJ_688_1142_table2' [astropy.io.votable.xmlutil]\n",
      "WARNING:astropy:W03: w5_psc.vot:11:0: W03: Implicitly generating an ID from a name 'J/ApJ/688/1142/table2' -> 'J_ApJ_688_1142_table2'\n",
      "WARNING: W03: w5_psc.vot:17:0: W03: Implicitly generating an ID from a name '-ref' -> '_-ref' [astropy.io.votable.xmlutil]\n",
      "WARNING:astropy:W03: w5_psc.vot:17:0: W03: Implicitly generating an ID from a name '-ref' -> '_-ref'\n",
      "WARNING: W03: w5_psc.vot:18:0: W03: Implicitly generating an ID from a name '-out.max' -> '_-out.max' [astropy.io.votable.xmlutil]\n",
      "WARNING:astropy:W03: w5_psc.vot:18:0: W03: Implicitly generating an ID from a name '-out.max' -> '_-out.max'\n",
      "WARNING: W03: w5_psc.vot:63:0: W03: Implicitly generating an ID from a name '[3.6]' -> '__3.6_' [astropy.io.votable.xmlutil]\n",
      "WARNING:astropy:W03: w5_psc.vot:63:0: W03: Implicitly generating an ID from a name '[3.6]' -> '__3.6_'\n",
      "WARNING: W03: w5_psc.vot:66:0: W03: Implicitly generating an ID from a name '[4.5]' -> '__4.5_' [astropy.io.votable.xmlutil]\n",
      "WARNING:astropy:W03: w5_psc.vot:66:0: W03: Implicitly generating an ID from a name '[4.5]' -> '__4.5_'\n",
      "WARNING: W03: w5_psc.vot:69:0: W03: Implicitly generating an ID from a name '[5.8]' -> '__5.8_' [astropy.io.votable.xmlutil]\n",
      "WARNING:astropy:W03: w5_psc.vot:69:0: W03: Implicitly generating an ID from a name '[5.8]' -> '__5.8_'\n",
      "WARNING: W03: w5_psc.vot:72:0: W03: Implicitly generating an ID from a name '[8.0]' -> '__8.0_' [astropy.io.votable.xmlutil]\n",
      "WARNING:astropy:W03: w5_psc.vot:72:0: W03: Implicitly generating an ID from a name '[8.0]' -> '__8.0_'\n",
      "WARNING: W03: w5_psc.vot:75:0: W03: Implicitly generating an ID from a name '[24]' -> '__24_' [astropy.io.votable.xmlutil]\n",
      "WARNING:astropy:W03: w5_psc.vot:75:0: W03: Implicitly generating an ID from a name '[24]' -> '__24_'\n",
      "WARNING: W03: w5_psc.vot:81:0: W03: Implicitly generating an ID from a name '[4.5] - [5.8]' -> '__4.5__-__5.8_' [astropy.io.votable.xmlutil]\n",
      "WARNING:astropy:W03: w5_psc.vot:81:0: W03: Implicitly generating an ID from a name '[4.5] - [5.8]' -> '__4.5__-__5.8_'\n",
      "WARNING: W03: w5_psc.vot:84:0: W03: Implicitly generating an ID from a name '[5.8] - [8.0]' -> '__5.8__-__8.0_' (suppressing further warnings of this type...) [astropy.io.votable.xmlutil]\n",
      "WARNING:astropy:W03: w5_psc.vot:84:0: W03: Implicitly generating an ID from a name '[5.8] - [8.0]' -> '__5.8__-__8.0_' (suppressing further warnings of this type...)\n"
     ]
    }
   ],
   "source": [
    "# Basic code that imports glue and loads in and links the data\n",
    "\n",
    "import sys\n",
    "from glue.core.data_factories import load_data\n",
    "from glue.core import DataCollection\n",
    "from glue.core.link_helpers import LinkSame\n",
    "from glue.app.qt.application import GlueApplication\n",
    "from glue.viewers.image.qt import ImageViewer\n",
    "from glue_vispy_viewers.volume.volume_viewer import VispyVolumeViewer\n",
    "\n",
    "image_filename='w5.fits'\n",
    "catalog_filename='w5_psc.vot'\n",
    "\n",
    "#load 2 datasets from files\n",
    "catalog = load_data(catalog_filename)\n",
    "image = load_data(image_filename)\n",
    "\n",
    "dc = DataCollection([catalog,image])\n",
    "\n",
    "# link positional information\n",
    "dc.add_link(LinkSame(catalog.id['RAJ2000'], image.id['Right Ascension']))\n",
    "dc.add_link(LinkSame(catalog.id['DEJ2000'], image.id['Declination']))\n",
    "\n",
    "#Create subset based on filament mask\n",
    "ra_state=(image.id['Right Ascension'] > 44) & (image.id['Right Ascension'] < 46)\n",
    "subset_group=dc.new_subset_group('RA_Selection',ra_state)\n",
    "subset_group.style.color = '#0000FF'\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import glue.utils.array as gua\n",
    "import glue.core.data as gcd\n",
    "import pandas as pd\n",
    "from pandas import DataFrame\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "w5_psc subset1\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Defines a subset and runs statistics using compute_statistic for the subset\n",
    "# Saves data using a pandas dataframe called my_pandas_data\n",
    "\n",
    "# Data that subset is pulled from\n",
    "data = dc[0]\n",
    "\n",
    "# Define state and subset\n",
    "state1 = data.id['Jmag'] > 14\n",
    "subset1 = data.new_subset(state1, label='Jmag > 14')\n",
    "\n",
    "# Same arrays as with full data\n",
    "mean_array = []\n",
    "median_array = []\n",
    "min_array = []\n",
    "max_array = []\n",
    "sum_array = []\n",
    "name_array = []\n",
    "tables = []\n",
    "\n",
    "headings = ('mean', 'median', 'minimum', 'maximum', 'sum')\n",
    "\n",
    "print(data.label, 'subset1')\n",
    "print() \n",
    "for j in range (0, len(data.components)):\n",
    "    name = data.components[j].label # Get the name of each component\n",
    "    name_array.append(name) # add to the name array to build the table\n",
    "    mean_array.append(data.compute_statistic('mean', subset1.components[j], subset_state=subset1.subset_state))\n",
    "    median_array.append(data.compute_statistic('median', subset1.components[j], subset_state=subset1.subset_state))       \n",
    "    min_array.append(data.compute_statistic('minimum', subset1.components[j], subset_state=subset1.subset_state))       \n",
    "    max_array.append(data.compute_statistic('maximum', subset1.components[j], subset_state=subset1.subset_state))      \n",
    "    sum_array.append(data.compute_statistic('sum', subset1.components[j], subset_state=subset1.subset_state))        \n",
    "   \n",
    "column_data = np.asarray([mean_array, median_array, min_array, max_array, sum_array]).transpose()\n",
    "\n",
    "my_pandas_data = pd.DataFrame(column_data, index=name_array, columns=headings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "QApplication instance already exists: <PyQt5.QtWidgets.QApplication object at 0x15148ee798>\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "setDragEnabled(self, bool): not enough arguments",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-28-506cf270bef8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    149\u001b[0m \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    150\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'QApplication instance already exists: %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 151\u001b[0;31m \u001b[0mex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStatsGui\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    152\u001b[0m \u001b[0mex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexec_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-28-506cf270bef8>\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, dc)\u001b[0m\n\u001b[1;32m     70\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtreeview\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtreeview\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetUniformRowHeights\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtreeview\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetDragEnabled\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m         \u001b[0;31m#Allow the user to select multiple rows at a time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: setDragEnabled(self, bool): not enough arguments"
     ]
    }
   ],
   "source": [
    "from PyQt5.QtCore import QAbstractItemModel, QFile, QIODevice, QModelIndex, Qt\n",
    "from PyQt5.QtWidgets import QApplication, QTreeView, QAbstractItemView\n",
    "from PyQt5.QtWidgets import QApplication, QLabel, QTreeView, QComboBox, QWidget, QPushButton, QHBoxLayout, QFrame, QTableView,QGroupBox, QDialog, QVBoxLayout, QLabel,QGridLayout\n",
    "from PyQt5 import QtCore, QtWidgets, QtGui\n",
    "from PyQt5.QtGui import QStandardItemModel, QStandardItem\n",
    "from PyQt5.QtCore import QItemSelectionModel\n",
    "from PyQt5.QtCore import pyqtSlot, QVariant\n",
    "\n",
    "import sys\n",
    "\n",
    "class pandasModel(QtCore.QAbstractTableModel):\n",
    "    # Set up the data in a form that allows it to be added to qt widget\n",
    "    def __init__(self, df, parent=None):\n",
    "        QtCore.QAbstractTableModel.__init__(self, parent)\n",
    "        self.data_frame = df\n",
    "        super(pandasModel, self).__init__(parent)      \n",
    "\n",
    "    def rowCount(self, parent=None):\n",
    "        return len(self.data_frame.values)\n",
    "\n",
    "    def columnCount(self, parent=None):\n",
    "        return self.data_frame.columns.size\n",
    "\n",
    "    def data(self, index, role=Qt.DisplayRole):\n",
    "        if index.isValid():\n",
    "            if role == Qt.DisplayRole:\n",
    "                return QVariant(str(\n",
    "                    self.data_frame.values[index.row()][index.column()]))\n",
    "        return QVariant()\n",
    "    \n",
    "    def headerData(self, col, orientation, role):\n",
    "        if orientation == Qt.Horizontal and role == Qt.DisplayRole:\n",
    "            return QVariant(self.data_frame.columns[col])\n",
    "        if orientation == Qt.Vertical and role == Qt.DisplayRole:\n",
    "            return QVariant(self.data_frame.index[col])\n",
    "        return QVariant()  \n",
    "\n",
    "class StatsGui(QWidget):\n",
    "    ''' \n",
    "    This class accepts a glue data collection object, and builds an interactive window\n",
    "    to display basic statistics (e.g. mean, median, mode) about each dataset\n",
    "    '''\n",
    "    def __init__(self,dc):\n",
    "        \n",
    "        # Initialize the object as a QWidget\n",
    "        QWidget.__init__(self)\n",
    "    \n",
    "        #Save the datacollection object as an attribute of class StatsGui\n",
    "        self.dc=dc\n",
    "\n",
    "        #Fix the size of the main GUI window (for now)\n",
    "        self.setMinimumSize(800, 600)\n",
    "        self.setMaximumSize(800, 600)\n",
    "        \n",
    "        #Set the title of the main GUI window\n",
    "        self.setWindowTitle('Statistics')\n",
    "        \n",
    "        #Set up tree view and fix it to the top half of the window\n",
    "        self.treeview = QTreeView(self)\n",
    "        self.treeview.setGeometry(50, 25, 700, 200) \n",
    "        \n",
    "        #Every time a selection is made in the tree, perform the functionality in 'myPressedEvent'\n",
    "        self.treeview.pressed.connect(self.myPressedEvent)\n",
    "\n",
    "        #Set the default clicking behavior to be row selection\n",
    "        self.treeview.setSelectionBehavior(QAbstractItemView.SelectRows)\n",
    "        model = QStandardItemModel()\n",
    "        model.setHorizontalHeaderLabels([''])\n",
    "\n",
    "        self.treeview.setModel(model)\n",
    "        self.treeview.setUniformRowHeights(True)\n",
    "        self.treeview.setDragEnabled()\n",
    "        \n",
    "        #Allow the user to select multiple rows at a time \n",
    "        self.treeview.setSelectionMode(QAbstractItemView.MultiSelection)\n",
    "    \n",
    "        # populate the tree\n",
    "        # Make all the datasets be parents, and make it so they are not selectable\n",
    "        for i in range(0,len(dc)):\n",
    "            parent = QStandardItem('{}'.format(self.dc.labels[i]))\n",
    "            parent.setEditable(False)\n",
    "            parent.setSelectable(False)\n",
    "            \n",
    "            # Make all the data components be children, nested under their parent\n",
    "            for j in range(0,len(self.dc[i].components)):\n",
    "                child=QStandardItem('{}'.format(str(self.dc[i].components[j])))\n",
    "                child.setEditable(False)\n",
    "                parent.appendRow(child)\n",
    "            \n",
    "            #Add the parents with their children to the QStandardItemModel\n",
    "            model.appendRow(parent)\n",
    "\n",
    "        #################Set up the QTableView Widget#############################\n",
    "        self.table = QTableView(self)\n",
    "        \n",
    "        #Move the table widget to the bottom of the GUI window\n",
    "        self.table.setGeometry(50, 250, 700, 300) \n",
    "        \n",
    "        #Set the table headings -- I have added Dataset and Component Columns. \n",
    "        self.headings = ('Component','Mean', 'Median', 'Minimum', 'Maximum', 'Sum')   \n",
    "        self.data_frame = pd.DataFrame(columns=self.headings)                      \n",
    "        self.model = pandasModel(self.data_frame)\n",
    "\n",
    "        self.table.setModel(self.model)\n",
    "        \n",
    "    def myPressedEvent (self, currentQModelIndex):\n",
    "        ''' \n",
    "        Every time a row (or rows) in the tree view is clicked or unclicked, this function\n",
    "        returns the dataset index and the component index for all selected rows.\n",
    "        You should be able to use this info determine the current table view\n",
    "        ''' \n",
    "        # Clear all the stat arrays\n",
    "        self.data_array = []\n",
    "        self.comp_array = []\n",
    "        self.mean_array = []\n",
    "        self.median_array = []\n",
    "        self.min_array = []\n",
    "        self.max_array = []\n",
    "        self.sum_array = []\n",
    "        \n",
    "        indexes=self.treeview.selectionModel().selectedRows()\n",
    "        for index in sorted(indexes):\n",
    "            self.runStats(index.parent().row(), index.row())\n",
    "            \n",
    "        model = pandasModel(self.data_frame)\n",
    "        self.table.setModel(model)\n",
    "        self.table.setSortingEnabled(True)\n",
    "        self.table.setShowGrid(False)  \n",
    "    \n",
    "    def runStats (self, data_i, comp_i):\n",
    "        '''\n",
    "        Runs statistics for the component comp_i of data set data_i\n",
    "        '''\n",
    "        self.data_array.append(dc[data_i].label)    \n",
    "        self.comp_array.append(self.dc[data_i].components[comp_i].label) # add to the name array to build the table\n",
    "        self.mean_array.append(self.dc[data_i].compute_statistic('mean', self.dc[data_i].components[comp_i]))\n",
    "        self.median_array.append(self.dc[data_i].compute_statistic('median', self.dc[data_i].components[comp_i]))       \n",
    "        self.min_array.append(self.dc[data_i].compute_statistic('minimum', self.dc[data_i].components[comp_i]))      \n",
    "        self.max_array.append(self.dc[data_i].compute_statistic('maximum', self.dc[data_i].components[comp_i]))     \n",
    "        self.sum_array.append(self.dc[data_i].compute_statistic('sum', self.dc[data_i].components[comp_i]))            \n",
    "                       \n",
    "        column_data = np.asarray([self.comp_array, self.mean_array, self.median_array, self.min_array, self.max_array, self.sum_array]).transpose()\n",
    "\n",
    "        self.data_frame = pd.DataFrame(column_data, index=self.data_array, columns=self.headings)             \n",
    "    \n",
    "app = QApplication.instance()\n",
    "if app is None:\n",
    "    app = QApplication(sys.argv)\n",
    "else:\n",
    "    print('QApplication instance already exists: %s' % str(app))\n",
    "ex = StatsGui(dc)\n",
    "ex.show()\n",
    "sys.exit(app.exec_())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Things to implement\n",
    "add the name of the data set to the component\n",
    "sort by maximum, minimum etc\n",
    "make it scroll if there are too many buttons\n",
    "have a drop down menu to select components that you want to turn into buttons\n",
    "have a button that says select all or deselect all\n",
    "show subsets as a button\n",
    "have a list of components and select from a list instead of buttons\n",
    "complete working insert row and remove row functionality when user clicks buttons\n",
    "add in data subsets\n",
    "color code table by data/subset?\n",
    "export to file button\n",
    "advanced mode that allows user to pick what stats to calculate'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on class QTreeView in module PyQt5.QtWidgets:\n",
      "\n",
      "class QTreeView(QAbstractItemView)\n",
      " |  QTreeView(parent: QWidget = None)\n",
      " |  \n",
      " |  Method resolution order:\n",
      " |      QTreeView\n",
      " |      QAbstractItemView\n",
      " |      QAbstractScrollArea\n",
      " |      QFrame\n",
      " |      QWidget\n",
      " |      PyQt5.QtCore.QObject\n",
      " |      sip.wrapper\n",
      " |      PyQt5.QtGui.QPaintDevice\n",
      " |      sip.simplewrapper\n",
      " |      builtins.object\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  allColumnsShowFocus(...)\n",
      " |      allColumnsShowFocus(self) -> bool\n",
      " |  \n",
      " |  autoExpandDelay(...)\n",
      " |      autoExpandDelay(self) -> int\n",
      " |  \n",
      " |  collapse(...)\n",
      " |      collapse(self, QModelIndex)\n",
      " |  \n",
      " |  collapseAll(...)\n",
      " |      collapseAll(self)\n",
      " |  \n",
      " |  collapsed = <unbound PYQT_SIGNAL collapsed(QModelIndex)>\n",
      " |  columnAt(...)\n",
      " |      columnAt(self, int) -> int\n",
      " |  \n",
      " |  columnCountChanged(...)\n",
      " |      columnCountChanged(self, int, int)\n",
      " |  \n",
      " |  columnMoved(...)\n",
      " |      columnMoved(self)\n",
      " |  \n",
      " |  columnResized(...)\n",
      " |      columnResized(self, int, int, int)\n",
      " |  \n",
      " |  columnViewportPosition(...)\n",
      " |      columnViewportPosition(self, int) -> int\n",
      " |  \n",
      " |  columnWidth(...)\n",
      " |      columnWidth(self, int) -> int\n",
      " |  \n",
      " |  currentChanged(...)\n",
      " |      currentChanged(self, QModelIndex, QModelIndex)\n",
      " |  \n",
      " |  dataChanged(...)\n",
      " |      dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = [])\n",
      " |  \n",
      " |  dragMoveEvent(...)\n",
      " |      dragMoveEvent(self, QDragMoveEvent)\n",
      " |  \n",
      " |  drawBranches(...)\n",
      " |      drawBranches(self, QPainter, QRect, QModelIndex)\n",
      " |  \n",
      " |  drawRow(...)\n",
      " |      drawRow(self, QPainter, QStyleOptionViewItem, QModelIndex)\n",
      " |  \n",
      " |  drawTree(...)\n",
      " |      drawTree(self, QPainter, QRegion)\n",
      " |  \n",
      " |  expand(...)\n",
      " |      expand(self, QModelIndex)\n",
      " |  \n",
      " |  expandAll(...)\n",
      " |      expandAll(self)\n",
      " |  \n",
      " |  expandToDepth(...)\n",
      " |      expandToDepth(self, int)\n",
      " |  \n",
      " |  expanded = <unbound PYQT_SIGNAL expanded(QModelIndex)>\n",
      " |  expandsOnDoubleClick(...)\n",
      " |      expandsOnDoubleClick(self) -> bool\n",
      " |  \n",
      " |  header(...)\n",
      " |      header(self) -> QHeaderView\n",
      " |  \n",
      " |  hideColumn(...)\n",
      " |      hideColumn(self, int)\n",
      " |  \n",
      " |  horizontalOffset(...)\n",
      " |      horizontalOffset(self) -> int\n",
      " |  \n",
      " |  horizontalScrollbarAction(...)\n",
      " |      horizontalScrollbarAction(self, int)\n",
      " |  \n",
      " |  indentation(...)\n",
      " |      indentation(self) -> int\n",
      " |  \n",
      " |  indexAbove(...)\n",
      " |      indexAbove(self, QModelIndex) -> QModelIndex\n",
      " |  \n",
      " |  indexAt(...)\n",
      " |      indexAt(self, QPoint) -> QModelIndex\n",
      " |  \n",
      " |  indexBelow(...)\n",
      " |      indexBelow(self, QModelIndex) -> QModelIndex\n",
      " |  \n",
      " |  indexRowSizeHint(...)\n",
      " |      indexRowSizeHint(self, QModelIndex) -> int\n",
      " |  \n",
      " |  isAnimated(...)\n",
      " |      isAnimated(self) -> bool\n",
      " |  \n",
      " |  isColumnHidden(...)\n",
      " |      isColumnHidden(self, int) -> bool\n",
      " |  \n",
      " |  isExpanded(...)\n",
      " |      isExpanded(self, QModelIndex) -> bool\n",
      " |  \n",
      " |  isFirstColumnSpanned(...)\n",
      " |      isFirstColumnSpanned(self, int, QModelIndex) -> bool\n",
      " |  \n",
      " |  isHeaderHidden(...)\n",
      " |      isHeaderHidden(self) -> bool\n",
      " |  \n",
      " |  isIndexHidden(...)\n",
      " |      isIndexHidden(self, QModelIndex) -> bool\n",
      " |  \n",
      " |  isRowHidden(...)\n",
      " |      isRowHidden(self, int, QModelIndex) -> bool\n",
      " |  \n",
      " |  isSortingEnabled(...)\n",
      " |      isSortingEnabled(self) -> bool\n",
      " |  \n",
      " |  itemsExpandable(...)\n",
      " |      itemsExpandable(self) -> bool\n",
      " |  \n",
      " |  keyPressEvent(...)\n",
      " |      keyPressEvent(self, QKeyEvent)\n",
      " |  \n",
      " |  keyboardSearch(...)\n",
      " |      keyboardSearch(self, str)\n",
      " |  \n",
      " |  mouseDoubleClickEvent(...)\n",
      " |      mouseDoubleClickEvent(self, QMouseEvent)\n",
      " |  \n",
      " |  mouseMoveEvent(...)\n",
      " |      mouseMoveEvent(self, QMouseEvent)\n",
      " |  \n",
      " |  mousePressEvent(...)\n",
      " |      mousePressEvent(self, QMouseEvent)\n",
      " |  \n",
      " |  mouseReleaseEvent(...)\n",
      " |      mouseReleaseEvent(self, QMouseEvent)\n",
      " |  \n",
      " |  moveCursor(...)\n",
      " |      moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex\n",
      " |  \n",
      " |  paintEvent(...)\n",
      " |      paintEvent(self, QPaintEvent)\n",
      " |  \n",
      " |  reexpand(...)\n",
      " |      reexpand(self)\n",
      " |  \n",
      " |  reset(...)\n",
      " |      reset(self)\n",
      " |  \n",
      " |  resetIndentation(...)\n",
      " |      resetIndentation(self)\n",
      " |  \n",
      " |  resizeColumnToContents(...)\n",
      " |      resizeColumnToContents(self, int)\n",
      " |  \n",
      " |  rootIsDecorated(...)\n",
      " |      rootIsDecorated(self) -> bool\n",
      " |  \n",
      " |  rowHeight(...)\n",
      " |      rowHeight(self, QModelIndex) -> int\n",
      " |  \n",
      " |  rowsAboutToBeRemoved(...)\n",
      " |      rowsAboutToBeRemoved(self, QModelIndex, int, int)\n",
      " |  \n",
      " |  rowsInserted(...)\n",
      " |      rowsInserted(self, QModelIndex, int, int)\n",
      " |  \n",
      " |  rowsRemoved(...)\n",
      " |      rowsRemoved(self, QModelIndex, int, int)\n",
      " |  \n",
      " |  scrollContentsBy(...)\n",
      " |      scrollContentsBy(self, int, int)\n",
      " |  \n",
      " |  scrollTo(...)\n",
      " |      scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible)\n",
      " |  \n",
      " |  selectAll(...)\n",
      " |      selectAll(self)\n",
      " |  \n",
      " |  selectedIndexes(...)\n",
      " |      selectedIndexes(self) -> object\n",
      " |  \n",
      " |  selectionChanged(...)\n",
      " |      selectionChanged(self, QItemSelection, QItemSelection)\n",
      " |  \n",
      " |  setAllColumnsShowFocus(...)\n",
      " |      setAllColumnsShowFocus(self, bool)\n",
      " |  \n",
      " |  setAnimated(...)\n",
      " |      setAnimated(self, bool)\n",
      " |  \n",
      " |  setAutoExpandDelay(...)\n",
      " |      setAutoExpandDelay(self, int)\n",
      " |  \n",
      " |  setColumnHidden(...)\n",
      " |      setColumnHidden(self, int, bool)\n",
      " |  \n",
      " |  setColumnWidth(...)\n",
      " |      setColumnWidth(self, int, int)\n",
      " |  \n",
      " |  setExpanded(...)\n",
      " |      setExpanded(self, QModelIndex, bool)\n",
      " |  \n",
      " |  setExpandsOnDoubleClick(...)\n",
      " |      setExpandsOnDoubleClick(self, bool)\n",
      " |  \n",
      " |  setFirstColumnSpanned(...)\n",
      " |      setFirstColumnSpanned(self, int, QModelIndex, bool)\n",
      " |  \n",
      " |  setHeader(...)\n",
      " |      setHeader(self, QHeaderView)\n",
      " |  \n",
      " |  setHeaderHidden(...)\n",
      " |      setHeaderHidden(self, bool)\n",
      " |  \n",
      " |  setIndentation(...)\n",
      " |      setIndentation(self, int)\n",
      " |  \n",
      " |  setItemsExpandable(...)\n",
      " |      setItemsExpandable(self, bool)\n",
      " |  \n",
      " |  setModel(...)\n",
      " |      setModel(self, QAbstractItemModel)\n",
      " |  \n",
      " |  setRootIndex(...)\n",
      " |      setRootIndex(self, QModelIndex)\n",
      " |  \n",
      " |  setRootIsDecorated(...)\n",
      " |      setRootIsDecorated(self, bool)\n",
      " |  \n",
      " |  setRowHidden(...)\n",
      " |      setRowHidden(self, int, QModelIndex, bool)\n",
      " |  \n",
      " |  setSelection(...)\n",
      " |      setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])\n",
      " |  \n",
      " |  setSelectionModel(...)\n",
      " |      setSelectionModel(self, QItemSelectionModel)\n",
      " |  \n",
      " |  setSortingEnabled(...)\n",
      " |      setSortingEnabled(self, bool)\n",
      " |  \n",
      " |  setTreePosition(...)\n",
      " |      setTreePosition(self, int)\n",
      " |  \n",
      " |  setUniformRowHeights(...)\n",
      " |      setUniformRowHeights(self, bool)\n",
      " |  \n",
      " |  setWordWrap(...)\n",
      " |      setWordWrap(self, bool)\n",
      " |  \n",
      " |  showColumn(...)\n",
      " |      showColumn(self, int)\n",
      " |  \n",
      " |  sizeHintForColumn(...)\n",
      " |      sizeHintForColumn(self, int) -> int\n",
      " |  \n",
      " |  sortByColumn(...)\n",
      " |      sortByColumn(self, int, Qt.SortOrder)\n",
      " |  \n",
      " |  timerEvent(...)\n",
      " |      timerEvent(self, QTimerEvent)\n",
      " |  \n",
      " |  treePosition(...)\n",
      " |      treePosition(self) -> int\n",
      " |  \n",
      " |  uniformRowHeights(...)\n",
      " |      uniformRowHeights(self) -> bool\n",
      " |  \n",
      " |  updateGeometries(...)\n",
      " |      updateGeometries(self)\n",
      " |  \n",
      " |  verticalOffset(...)\n",
      " |      verticalOffset(self) -> int\n",
      " |  \n",
      " |  viewportEvent(...)\n",
      " |      viewportEvent(self, QEvent) -> bool\n",
      " |  \n",
      " |  viewportSizeHint(...)\n",
      " |      viewportSizeHint(self) -> QSize\n",
      " |  \n",
      " |  visualRect(...)\n",
      " |      visualRect(self, QModelIndex) -> QRect\n",
      " |  \n",
      " |  visualRegionForSelection(...)\n",
      " |      visualRegionForSelection(self, QItemSelection) -> QRegion\n",
      " |  \n",
      " |  wordWrap(...)\n",
      " |      wordWrap(self) -> bool\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from QAbstractItemView:\n",
      " |  \n",
      " |  activated = <unbound PYQT_SIGNAL activated(QModelIndex)>\n",
      " |  alternatingRowColors(...)\n",
      " |      alternatingRowColors(self) -> bool\n",
      " |  \n",
      " |  autoScrollMargin(...)\n",
      " |      autoScrollMargin(self) -> int\n",
      " |  \n",
      " |  clearSelection(...)\n",
      " |      clearSelection(self)\n",
      " |  \n",
      " |  clicked = <unbound PYQT_SIGNAL clicked(QModelIndex)>\n",
      " |  closeEditor(...)\n",
      " |      closeEditor(self, QWidget, QAbstractItemDelegate.EndEditHint)\n",
      " |  \n",
      " |  closePersistentEditor(...)\n",
      " |      closePersistentEditor(self, QModelIndex)\n",
      " |  \n",
      " |  commitData(...)\n",
      " |      commitData(self, QWidget)\n",
      " |  \n",
      " |  currentIndex(...)\n",
      " |      currentIndex(self) -> QModelIndex\n",
      " |  \n",
      " |  defaultDropAction(...)\n",
      " |      defaultDropAction(self) -> Qt.DropAction\n",
      " |  \n",
      " |  dirtyRegionOffset(...)\n",
      " |      dirtyRegionOffset(self) -> QPoint\n",
      " |  \n",
      " |  doubleClicked = <unbound PYQT_SIGNAL doubleClicked(QModelIndex)>\n",
      " |  dragDropMode(...)\n",
      " |      dragDropMode(self) -> QAbstractItemView.DragDropMode\n",
      " |  \n",
      " |  dragDropOverwriteMode(...)\n",
      " |      dragDropOverwriteMode(self) -> bool\n",
      " |  \n",
      " |  dragEnabled(...)\n",
      " |      dragEnabled(self) -> bool\n",
      " |  \n",
      " |  dragEnterEvent(...)\n",
      " |      dragEnterEvent(self, QDragEnterEvent)\n",
      " |  \n",
      " |  dragLeaveEvent(...)\n",
      " |      dragLeaveEvent(self, QDragLeaveEvent)\n",
      " |  \n",
      " |  dropEvent(...)\n",
      " |      dropEvent(self, QDropEvent)\n",
      " |  \n",
      " |  dropIndicatorPosition(...)\n",
      " |      dropIndicatorPosition(self) -> QAbstractItemView.DropIndicatorPosition\n",
      " |  \n",
      " |  edit(...)\n",
      " |      edit(self, QModelIndex)\n",
      " |      edit(self, QModelIndex, QAbstractItemView.EditTrigger, QEvent) -> bool\n",
      " |  \n",
      " |  editTriggers(...)\n",
      " |      editTriggers(self) -> QAbstractItemView.EditTriggers\n",
      " |  \n",
      " |  editorDestroyed(...)\n",
      " |      editorDestroyed(self, QObject)\n",
      " |  \n",
      " |  entered = <unbound PYQT_SIGNAL entered(QModelIndex)>\n",
      " |  event(...)\n",
      " |      event(self, QEvent) -> bool\n",
      " |  \n",
      " |  executeDelayedItemsLayout(...)\n",
      " |      executeDelayedItemsLayout(self)\n",
      " |  \n",
      " |  focusInEvent(...)\n",
      " |      focusInEvent(self, QFocusEvent)\n",
      " |  \n",
      " |  focusNextPrevChild(...)\n",
      " |      focusNextPrevChild(self, bool) -> bool\n",
      " |  \n",
      " |  focusOutEvent(...)\n",
      " |      focusOutEvent(self, QFocusEvent)\n",
      " |  \n",
      " |  hasAutoScroll(...)\n",
      " |      hasAutoScroll(self) -> bool\n",
      " |  \n",
      " |  horizontalScrollMode(...)\n",
      " |      horizontalScrollMode(self) -> QAbstractItemView.ScrollMode\n",
      " |  \n",
      " |  horizontalScrollbarValueChanged(...)\n",
      " |      horizontalScrollbarValueChanged(self, int)\n",
      " |  \n",
      " |  iconSize(...)\n",
      " |      iconSize(self) -> QSize\n",
      " |  \n",
      " |  iconSizeChanged = <unbound PYQT_SIGNAL iconSizeChanged(QSize)>\n",
      " |  indexWidget(...)\n",
      " |      indexWidget(self, QModelIndex) -> QWidget\n",
      " |  \n",
      " |  inputMethodEvent(...)\n",
      " |      inputMethodEvent(self, QInputMethodEvent)\n",
      " |  \n",
      " |  inputMethodQuery(...)\n",
      " |      inputMethodQuery(self, Qt.InputMethodQuery) -> Any\n",
      " |  \n",
      " |  itemDelegate(...)\n",
      " |      itemDelegate(self) -> QAbstractItemDelegate\n",
      " |      itemDelegate(self, QModelIndex) -> QAbstractItemDelegate\n",
      " |  \n",
      " |  itemDelegateForColumn(...)\n",
      " |      itemDelegateForColumn(self, int) -> QAbstractItemDelegate\n",
      " |  \n",
      " |  itemDelegateForRow(...)\n",
      " |      itemDelegateForRow(self, int) -> QAbstractItemDelegate\n",
      " |  \n",
      " |  model(...)\n",
      " |      model(self) -> QAbstractItemModel\n",
      " |  \n",
      " |  openPersistentEditor(...)\n",
      " |      openPersistentEditor(self, QModelIndex)\n",
      " |  \n",
      " |  pressed = <unbound PYQT_SIGNAL pressed(QModelIndex)>\n",
      " |  resetHorizontalScrollMode(...)\n",
      " |      resetHorizontalScrollMode(self)\n",
      " |  \n",
      " |  resetVerticalScrollMode(...)\n",
      " |      resetVerticalScrollMode(self)\n",
      " |  \n",
      " |  resizeEvent(...)\n",
      " |      resizeEvent(self, QResizeEvent)\n",
      " |  \n",
      " |  rootIndex(...)\n",
      " |      rootIndex(self) -> QModelIndex\n",
      " |  \n",
      " |  scheduleDelayedItemsLayout(...)\n",
      " |      scheduleDelayedItemsLayout(self)\n",
      " |  \n",
      " |  scrollDirtyRegion(...)\n",
      " |      scrollDirtyRegion(self, int, int)\n",
      " |  \n",
      " |  scrollToBottom(...)\n",
      " |      scrollToBottom(self)\n",
      " |  \n",
      " |  scrollToTop(...)\n",
      " |      scrollToTop(self)\n",
      " |  \n",
      " |  selectionBehavior(...)\n",
      " |      selectionBehavior(self) -> QAbstractItemView.SelectionBehavior\n",
      " |  \n",
      " |  selectionCommand(...)\n",
      " |      selectionCommand(self, QModelIndex, event: QEvent = None) -> QItemSelectionModel.SelectionFlags\n",
      " |  \n",
      " |  selectionMode(...)\n",
      " |      selectionMode(self) -> QAbstractItemView.SelectionMode\n",
      " |  \n",
      " |  selectionModel(...)\n",
      " |      selectionModel(self) -> QItemSelectionModel\n",
      " |  \n",
      " |  setAlternatingRowColors(...)\n",
      " |      setAlternatingRowColors(self, bool)\n",
      " |  \n",
      " |  setAutoScroll(...)\n",
      " |      setAutoScroll(self, bool)\n",
      " |  \n",
      " |  setAutoScrollMargin(...)\n",
      " |      setAutoScrollMargin(self, int)\n",
      " |  \n",
      " |  setCurrentIndex(...)\n",
      " |      setCurrentIndex(self, QModelIndex)\n",
      " |  \n",
      " |  setDefaultDropAction(...)\n",
      " |      setDefaultDropAction(self, Qt.DropAction)\n",
      " |  \n",
      " |  setDirtyRegion(...)\n",
      " |      setDirtyRegion(self, QRegion)\n",
      " |  \n",
      " |  setDragDropMode(...)\n",
      " |      setDragDropMode(self, QAbstractItemView.DragDropMode)\n",
      " |  \n",
      " |  setDragDropOverwriteMode(...)\n",
      " |      setDragDropOverwriteMode(self, bool)\n",
      " |  \n",
      " |  setDragEnabled(...)\n",
      " |      setDragEnabled(self, bool)\n",
      " |  \n",
      " |  setDropIndicatorShown(...)\n",
      " |      setDropIndicatorShown(self, bool)\n",
      " |  \n",
      " |  setEditTriggers(...)\n",
      " |      setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger])\n",
      " |  \n",
      " |  setHorizontalScrollMode(...)\n",
      " |      setHorizontalScrollMode(self, QAbstractItemView.ScrollMode)\n",
      " |  \n",
      " |  setIconSize(...)\n",
      " |      setIconSize(self, QSize)\n",
      " |  \n",
      " |  setIndexWidget(...)\n",
      " |      setIndexWidget(self, QModelIndex, QWidget)\n",
      " |  \n",
      " |  setItemDelegate(...)\n",
      " |      setItemDelegate(self, QAbstractItemDelegate)\n",
      " |  \n",
      " |  setItemDelegateForColumn(...)\n",
      " |      setItemDelegateForColumn(self, int, QAbstractItemDelegate)\n",
      " |  \n",
      " |  setItemDelegateForRow(...)\n",
      " |      setItemDelegateForRow(self, int, QAbstractItemDelegate)\n",
      " |  \n",
      " |  setSelectionBehavior(...)\n",
      " |      setSelectionBehavior(self, QAbstractItemView.SelectionBehavior)\n",
      " |  \n",
      " |  setSelectionMode(...)\n",
      " |      setSelectionMode(self, QAbstractItemView.SelectionMode)\n",
      " |  \n",
      " |  setState(...)\n",
      " |      setState(self, QAbstractItemView.State)\n",
      " |  \n",
      " |  setTabKeyNavigation(...)\n",
      " |      setTabKeyNavigation(self, bool)\n",
      " |  \n",
      " |  setTextElideMode(...)\n",
      " |      setTextElideMode(self, Qt.TextElideMode)\n",
      " |  \n",
      " |  setVerticalScrollMode(...)\n",
      " |      setVerticalScrollMode(self, QAbstractItemView.ScrollMode)\n",
      " |  \n",
      " |  showDropIndicator(...)\n",
      " |      showDropIndicator(self) -> bool\n",
      " |  \n",
      " |  sizeHintForIndex(...)\n",
      " |      sizeHintForIndex(self, QModelIndex) -> QSize\n",
      " |  \n",
      " |  sizeHintForRow(...)\n",
      " |      sizeHintForRow(self, int) -> int\n",
      " |  \n",
      " |  startDrag(...)\n",
      " |      startDrag(self, Union[Qt.DropActions, Qt.DropAction])\n",
      " |  \n",
      " |  state(...)\n",
      " |      state(self) -> QAbstractItemView.State\n",
      " |  \n",
      " |  tabKeyNavigation(...)\n",
      " |      tabKeyNavigation(self) -> bool\n",
      " |  \n",
      " |  textElideMode(...)\n",
      " |      textElideMode(self) -> Qt.TextElideMode\n",
      " |  \n",
      " |  update(...)\n",
      " |      update(self)\n",
      " |      update(self, QModelIndex)\n",
      " |  \n",
      " |  updateEditorData(...)\n",
      " |      updateEditorData(self)\n",
      " |  \n",
      " |  updateEditorGeometries(...)\n",
      " |      updateEditorGeometries(self)\n",
      " |  \n",
      " |  verticalScrollMode(...)\n",
      " |      verticalScrollMode(self) -> QAbstractItemView.ScrollMode\n",
      " |  \n",
      " |  verticalScrollbarAction(...)\n",
      " |      verticalScrollbarAction(self, int)\n",
      " |  \n",
      " |  verticalScrollbarValueChanged(...)\n",
      " |      verticalScrollbarValueChanged(self, int)\n",
      " |  \n",
      " |  viewOptions(...)\n",
      " |      viewOptions(self) -> QStyleOptionViewItem\n",
      " |  \n",
      " |  viewportEntered = <unbound PYQT_SIGNAL viewportEntered()>\n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes inherited from QAbstractItemView:\n",
      " |  \n",
      " |  AboveItem = 1\n",
      " |  \n",
      " |  AllEditTriggers = 31\n",
      " |  \n",
      " |  AnimatingState = 6\n",
      " |  \n",
      " |  AnyKeyPressed = 16\n",
      " |  \n",
      " |  BelowItem = 2\n",
      " |  \n",
      " |  CollapsingState = 5\n",
      " |  \n",
      " |  ContiguousSelection = 4\n",
      " |  \n",
      " |  CurrentChanged = 1\n",
      " |  \n",
      " |  CursorAction = <class 'PyQt5.QtWidgets.QAbstractItemView.CursorAction'...\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  DoubleClicked = 2\n",
      " |  \n",
      " |  DragDrop = 3\n",
      " |  \n",
      " |  DragDropMode = <class 'PyQt5.QtWidgets.QAbstractItemView.DragDropMode'...\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  DragOnly = 1\n",
      " |  \n",
      " |  DragSelectingState = 2\n",
      " |  \n",
      " |  DraggingState = 1\n",
      " |  \n",
      " |  DropIndicatorPosition = <class 'PyQt5.QtWidgets.QAbstractItemView.Drop...\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  DropOnly = 2\n",
      " |  \n",
      " |  EditKeyPressed = 8\n",
      " |  \n",
      " |  EditTrigger = <class 'PyQt5.QtWidgets.QAbstractItemView.EditTrigger'>\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  EditTriggers = <class 'PyQt5.QtWidgets.EditTriggers'>\n",
      " |      QAbstractItemView.EditTriggers()\n",
      " |      QAbstractItemView.EditTriggers(Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger])\n",
      " |      QAbstractItemView.EditTriggers(QAbstractItemView.EditTriggers)\n",
      " |  \n",
      " |  EditingState = 3\n",
      " |  \n",
      " |  EnsureVisible = 0\n",
      " |  \n",
      " |  ExpandingState = 4\n",
      " |  \n",
      " |  ExtendedSelection = 3\n",
      " |  \n",
      " |  InternalMove = 4\n",
      " |  \n",
      " |  MoveDown = 1\n",
      " |  \n",
      " |  MoveEnd = 5\n",
      " |  \n",
      " |  MoveHome = 4\n",
      " |  \n",
      " |  MoveLeft = 2\n",
      " |  \n",
      " |  MoveNext = 8\n",
      " |  \n",
      " |  MovePageDown = 7\n",
      " |  \n",
      " |  MovePageUp = 6\n",
      " |  \n",
      " |  MovePrevious = 9\n",
      " |  \n",
      " |  MoveRight = 3\n",
      " |  \n",
      " |  MoveUp = 0\n",
      " |  \n",
      " |  MultiSelection = 2\n",
      " |  \n",
      " |  NoDragDrop = 0\n",
      " |  \n",
      " |  NoEditTriggers = 0\n",
      " |  \n",
      " |  NoSelection = 0\n",
      " |  \n",
      " |  NoState = 0\n",
      " |  \n",
      " |  OnItem = 0\n",
      " |  \n",
      " |  OnViewport = 3\n",
      " |  \n",
      " |  PositionAtBottom = 2\n",
      " |  \n",
      " |  PositionAtCenter = 3\n",
      " |  \n",
      " |  PositionAtTop = 1\n",
      " |  \n",
      " |  ScrollHint = <class 'PyQt5.QtWidgets.QAbstractItemView.ScrollHint'>\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  ScrollMode = <class 'PyQt5.QtWidgets.QAbstractItemView.ScrollMode'>\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  ScrollPerItem = 0\n",
      " |  \n",
      " |  ScrollPerPixel = 1\n",
      " |  \n",
      " |  SelectColumns = 2\n",
      " |  \n",
      " |  SelectItems = 0\n",
      " |  \n",
      " |  SelectRows = 1\n",
      " |  \n",
      " |  SelectedClicked = 4\n",
      " |  \n",
      " |  SelectionBehavior = <class 'PyQt5.QtWidgets.QAbstractItemView.Selectio...\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  SelectionMode = <class 'PyQt5.QtWidgets.QAbstractItemView.SelectionMod...\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  SingleSelection = 1\n",
      " |  \n",
      " |  State = <class 'PyQt5.QtWidgets.QAbstractItemView.State'>\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from QAbstractScrollArea:\n",
      " |  \n",
      " |  addScrollBarWidget(...)\n",
      " |      addScrollBarWidget(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag])\n",
      " |  \n",
      " |  contextMenuEvent(...)\n",
      " |      contextMenuEvent(self, QContextMenuEvent)\n",
      " |  \n",
      " |  cornerWidget(...)\n",
      " |      cornerWidget(self) -> QWidget\n",
      " |  \n",
      " |  eventFilter(...)\n",
      " |      eventFilter(self, QObject, QEvent) -> bool\n",
      " |  \n",
      " |  horizontalScrollBar(...)\n",
      " |      horizontalScrollBar(self) -> QScrollBar\n",
      " |  \n",
      " |  horizontalScrollBarPolicy(...)\n",
      " |      horizontalScrollBarPolicy(self) -> Qt.ScrollBarPolicy\n",
      " |  \n",
      " |  maximumViewportSize(...)\n",
      " |      maximumViewportSize(self) -> QSize\n",
      " |  \n",
      " |  minimumSizeHint(...)\n",
      " |      minimumSizeHint(self) -> QSize\n",
      " |  \n",
      " |  scrollBarWidgets(...)\n",
      " |      scrollBarWidgets(self, Union[Qt.Alignment, Qt.AlignmentFlag]) -> object\n",
      " |  \n",
      " |  setCornerWidget(...)\n",
      " |      setCornerWidget(self, QWidget)\n",
      " |  \n",
      " |  setHorizontalScrollBar(...)\n",
      " |      setHorizontalScrollBar(self, QScrollBar)\n",
      " |  \n",
      " |  setHorizontalScrollBarPolicy(...)\n",
      " |      setHorizontalScrollBarPolicy(self, Qt.ScrollBarPolicy)\n",
      " |  \n",
      " |  setSizeAdjustPolicy(...)\n",
      " |      setSizeAdjustPolicy(self, QAbstractScrollArea.SizeAdjustPolicy)\n",
      " |  \n",
      " |  setVerticalScrollBar(...)\n",
      " |      setVerticalScrollBar(self, QScrollBar)\n",
      " |  \n",
      " |  setVerticalScrollBarPolicy(...)\n",
      " |      setVerticalScrollBarPolicy(self, Qt.ScrollBarPolicy)\n",
      " |  \n",
      " |  setViewport(...)\n",
      " |      setViewport(self, QWidget)\n",
      " |  \n",
      " |  setViewportMargins(...)\n",
      " |      setViewportMargins(self, int, int, int, int)\n",
      " |      setViewportMargins(self, QMargins)\n",
      " |  \n",
      " |  setupViewport(...)\n",
      " |      setupViewport(self, QWidget)\n",
      " |  \n",
      " |  sizeAdjustPolicy(...)\n",
      " |      sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy\n",
      " |  \n",
      " |  sizeHint(...)\n",
      " |      sizeHint(self) -> QSize\n",
      " |  \n",
      " |  verticalScrollBar(...)\n",
      " |      verticalScrollBar(self) -> QScrollBar\n",
      " |  \n",
      " |  verticalScrollBarPolicy(...)\n",
      " |      verticalScrollBarPolicy(self) -> Qt.ScrollBarPolicy\n",
      " |  \n",
      " |  viewport(...)\n",
      " |      viewport(self) -> QWidget\n",
      " |  \n",
      " |  viewportMargins(...)\n",
      " |      viewportMargins(self) -> QMargins\n",
      " |  \n",
      " |  wheelEvent(...)\n",
      " |      wheelEvent(self, QWheelEvent)\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes inherited from QAbstractScrollArea:\n",
      " |  \n",
      " |  AdjustIgnored = 0\n",
      " |  \n",
      " |  AdjustToContents = 2\n",
      " |  \n",
      " |  AdjustToContentsOnFirstShow = 1\n",
      " |  \n",
      " |  SizeAdjustPolicy = <class 'PyQt5.QtWidgets.QAbstractScrollArea.SizeAdj...\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from QFrame:\n",
      " |  \n",
      " |  changeEvent(...)\n",
      " |      changeEvent(self, QEvent)\n",
      " |  \n",
      " |  drawFrame(...)\n",
      " |      drawFrame(self, QPainter)\n",
      " |  \n",
      " |  frameRect(...)\n",
      " |      frameRect(self) -> QRect\n",
      " |  \n",
      " |  frameShadow(...)\n",
      " |      frameShadow(self) -> QFrame.Shadow\n",
      " |  \n",
      " |  frameShape(...)\n",
      " |      frameShape(self) -> QFrame.Shape\n",
      " |  \n",
      " |  frameStyle(...)\n",
      " |      frameStyle(self) -> int\n",
      " |  \n",
      " |  frameWidth(...)\n",
      " |      frameWidth(self) -> int\n",
      " |  \n",
      " |  initStyleOption(...)\n",
      " |      initStyleOption(self, QStyleOptionFrame)\n",
      " |  \n",
      " |  lineWidth(...)\n",
      " |      lineWidth(self) -> int\n",
      " |  \n",
      " |  midLineWidth(...)\n",
      " |      midLineWidth(self) -> int\n",
      " |  \n",
      " |  setFrameRect(...)\n",
      " |      setFrameRect(self, QRect)\n",
      " |  \n",
      " |  setFrameShadow(...)\n",
      " |      setFrameShadow(self, QFrame.Shadow)\n",
      " |  \n",
      " |  setFrameShape(...)\n",
      " |      setFrameShape(self, QFrame.Shape)\n",
      " |  \n",
      " |  setFrameStyle(...)\n",
      " |      setFrameStyle(self, int)\n",
      " |  \n",
      " |  setLineWidth(...)\n",
      " |      setLineWidth(self, int)\n",
      " |  \n",
      " |  setMidLineWidth(...)\n",
      " |      setMidLineWidth(self, int)\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes inherited from QFrame:\n",
      " |  \n",
      " |  Box = 1\n",
      " |  \n",
      " |  HLine = 4\n",
      " |  \n",
      " |  NoFrame = 0\n",
      " |  \n",
      " |  Panel = 2\n",
      " |  \n",
      " |  Plain = 16\n",
      " |  \n",
      " |  Raised = 32\n",
      " |  \n",
      " |  Shadow = <class 'PyQt5.QtWidgets.QFrame.Shadow'>\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  Shadow_Mask = 240\n",
      " |  \n",
      " |  Shape = <class 'PyQt5.QtWidgets.QFrame.Shape'>\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  Shape_Mask = 15\n",
      " |  \n",
      " |  StyleMask = <class 'PyQt5.QtWidgets.QFrame.StyleMask'>\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  StyledPanel = 6\n",
      " |  \n",
      " |  Sunken = 48\n",
      " |  \n",
      " |  VLine = 5\n",
      " |  \n",
      " |  WinPanel = 3\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from QWidget:\n",
      " |  \n",
      " |  acceptDrops(...)\n",
      " |      acceptDrops(self) -> bool\n",
      " |  \n",
      " |  accessibleDescription(...)\n",
      " |      accessibleDescription(self) -> str\n",
      " |  \n",
      " |  accessibleName(...)\n",
      " |      accessibleName(self) -> str\n",
      " |  \n",
      " |  actionEvent(...)\n",
      " |      actionEvent(self, QActionEvent)\n",
      " |  \n",
      " |  actions(...)\n",
      " |      actions(self) -> List[QAction]\n",
      " |  \n",
      " |  activateWindow(...)\n",
      " |      activateWindow(self)\n",
      " |  \n",
      " |  addAction(...)\n",
      " |      addAction(self, QAction)\n",
      " |  \n",
      " |  addActions(...)\n",
      " |      addActions(self, object)\n",
      " |  \n",
      " |  adjustSize(...)\n",
      " |      adjustSize(self)\n",
      " |  \n",
      " |  autoFillBackground(...)\n",
      " |      autoFillBackground(self) -> bool\n",
      " |  \n",
      " |  backgroundRole(...)\n",
      " |      backgroundRole(self) -> QPalette.ColorRole\n",
      " |  \n",
      " |  baseSize(...)\n",
      " |      baseSize(self) -> QSize\n",
      " |  \n",
      " |  childAt(...)\n",
      " |      childAt(self, QPoint) -> QWidget\n",
      " |      childAt(self, int, int) -> QWidget\n",
      " |  \n",
      " |  childrenRect(...)\n",
      " |      childrenRect(self) -> QRect\n",
      " |  \n",
      " |  childrenRegion(...)\n",
      " |      childrenRegion(self) -> QRegion\n",
      " |  \n",
      " |  clearFocus(...)\n",
      " |      clearFocus(self)\n",
      " |  \n",
      " |  clearMask(...)\n",
      " |      clearMask(self)\n",
      " |  \n",
      " |  close(...)\n",
      " |      close(self) -> bool\n",
      " |  \n",
      " |  closeEvent(...)\n",
      " |      closeEvent(self, QCloseEvent)\n",
      " |  \n",
      " |  contentsMargins(...)\n",
      " |      contentsMargins(self) -> QMargins\n",
      " |  \n",
      " |  contentsRect(...)\n",
      " |      contentsRect(self) -> QRect\n",
      " |  \n",
      " |  contextMenuPolicy(...)\n",
      " |      contextMenuPolicy(self) -> Qt.ContextMenuPolicy\n",
      " |  \n",
      " |  create(...)\n",
      " |      create(self, window: sip.voidptr = 0, initializeWindow: bool = True, destroyOldWindow: bool = True)\n",
      " |  \n",
      " |  createWindowContainer(...)\n",
      " |      createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget\n",
      " |  \n",
      " |  cursor(...)\n",
      " |      cursor(self) -> QCursor\n",
      " |  \n",
      " |  customContextMenuRequested = <unbound PYQT_SIGNAL customContextMenuRequested(QPoint)>\n",
      " |  destroy(...)\n",
      " |      destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True)\n",
      " |  \n",
      " |  devType(...)\n",
      " |      devType(self) -> int\n",
      " |  \n",
      " |  effectiveWinId(...)\n",
      " |      effectiveWinId(self) -> sip.voidptr\n",
      " |  \n",
      " |  ensurePolished(...)\n",
      " |      ensurePolished(self)\n",
      " |  \n",
      " |  enterEvent(...)\n",
      " |      enterEvent(self, QEvent)\n",
      " |  \n",
      " |  find(...)\n",
      " |      find(sip.voidptr) -> QWidget\n",
      " |  \n",
      " |  focusNextChild(...)\n",
      " |      focusNextChild(self) -> bool\n",
      " |  \n",
      " |  focusPolicy(...)\n",
      " |      focusPolicy(self) -> Qt.FocusPolicy\n",
      " |  \n",
      " |  focusPreviousChild(...)\n",
      " |      focusPreviousChild(self) -> bool\n",
      " |  \n",
      " |  focusProxy(...)\n",
      " |      focusProxy(self) -> QWidget\n",
      " |  \n",
      " |  focusWidget(...)\n",
      " |      focusWidget(self) -> QWidget\n",
      " |  \n",
      " |  font(...)\n",
      " |      font(self) -> QFont\n",
      " |  \n",
      " |  fontInfo(...)\n",
      " |      fontInfo(self) -> QFontInfo\n",
      " |  \n",
      " |  fontMetrics(...)\n",
      " |      fontMetrics(self) -> QFontMetrics\n",
      " |  \n",
      " |  foregroundRole(...)\n",
      " |      foregroundRole(self) -> QPalette.ColorRole\n",
      " |  \n",
      " |  frameGeometry(...)\n",
      " |      frameGeometry(self) -> QRect\n",
      " |  \n",
      " |  frameSize(...)\n",
      " |      frameSize(self) -> QSize\n",
      " |  \n",
      " |  geometry(...)\n",
      " |      geometry(self) -> QRect\n",
      " |  \n",
      " |  getContentsMargins(...)\n",
      " |      getContentsMargins(self) -> Tuple[int, int, int, int]\n",
      " |  \n",
      " |  grab(...)\n",
      " |      grab(self, rectangle: QRect = QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap\n",
      " |  \n",
      " |  grabGesture(...)\n",
      " |      grabGesture(self, Qt.GestureType, flags: Union[Qt.GestureFlags, Qt.GestureFlag] = Qt.GestureFlags())\n",
      " |  \n",
      " |  grabKeyboard(...)\n",
      " |      grabKeyboard(self)\n",
      " |  \n",
      " |  grabMouse(...)\n",
      " |      grabMouse(self)\n",
      " |      grabMouse(self, Union[QCursor, Qt.CursorShape])\n",
      " |  \n",
      " |  grabShortcut(...)\n",
      " |      grabShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int], context: Qt.ShortcutContext = Qt.WindowShortcut) -> int\n",
      " |  \n",
      " |  graphicsEffect(...)\n",
      " |      graphicsEffect(self) -> QGraphicsEffect\n",
      " |  \n",
      " |  graphicsProxyWidget(...)\n",
      " |      graphicsProxyWidget(self) -> QGraphicsProxyWidget\n",
      " |  \n",
      " |  hasFocus(...)\n",
      " |      hasFocus(self) -> bool\n",
      " |  \n",
      " |  hasHeightForWidth(...)\n",
      " |      hasHeightForWidth(self) -> bool\n",
      " |  \n",
      " |  hasMouseTracking(...)\n",
      " |      hasMouseTracking(self) -> bool\n",
      " |  \n",
      " |  hasTabletTracking(...)\n",
      " |      hasTabletTracking(self) -> bool\n",
      " |  \n",
      " |  height(...)\n",
      " |      height(self) -> int\n",
      " |  \n",
      " |  heightForWidth(...)\n",
      " |      heightForWidth(self, int) -> int\n",
      " |  \n",
      " |  hide(...)\n",
      " |      hide(self)\n",
      " |  \n",
      " |  hideEvent(...)\n",
      " |      hideEvent(self, QHideEvent)\n",
      " |  \n",
      " |  initPainter(...)\n",
      " |      initPainter(self, QPainter)\n",
      " |  \n",
      " |  inputMethodHints(...)\n",
      " |      inputMethodHints(self) -> Qt.InputMethodHints\n",
      " |  \n",
      " |  insertAction(...)\n",
      " |      insertAction(self, QAction, QAction)\n",
      " |  \n",
      " |  insertActions(...)\n",
      " |      insertActions(self, QAction, Iterable[QAction])\n",
      " |  \n",
      " |  isActiveWindow(...)\n",
      " |      isActiveWindow(self) -> bool\n",
      " |  \n",
      " |  isAncestorOf(...)\n",
      " |      isAncestorOf(self, QWidget) -> bool\n",
      " |  \n",
      " |  isEnabled(...)\n",
      " |      isEnabled(self) -> bool\n",
      " |  \n",
      " |  isEnabledTo(...)\n",
      " |      isEnabledTo(self, QWidget) -> bool\n",
      " |  \n",
      " |  isFullScreen(...)\n",
      " |      isFullScreen(self) -> bool\n",
      " |  \n",
      " |  isHidden(...)\n",
      " |      isHidden(self) -> bool\n",
      " |  \n",
      " |  isLeftToRight(...)\n",
      " |      isLeftToRight(self) -> bool\n",
      " |  \n",
      " |  isMaximized(...)\n",
      " |      isMaximized(self) -> bool\n",
      " |  \n",
      " |  isMinimized(...)\n",
      " |      isMinimized(self) -> bool\n",
      " |  \n",
      " |  isModal(...)\n",
      " |      isModal(self) -> bool\n",
      " |  \n",
      " |  isRightToLeft(...)\n",
      " |      isRightToLeft(self) -> bool\n",
      " |  \n",
      " |  isVisible(...)\n",
      " |      isVisible(self) -> bool\n",
      " |  \n",
      " |  isVisibleTo(...)\n",
      " |      isVisibleTo(self, QWidget) -> bool\n",
      " |  \n",
      " |  isWindow(...)\n",
      " |      isWindow(self) -> bool\n",
      " |  \n",
      " |  isWindowModified(...)\n",
      " |      isWindowModified(self) -> bool\n",
      " |  \n",
      " |  keyReleaseEvent(...)\n",
      " |      keyReleaseEvent(self, QKeyEvent)\n",
      " |  \n",
      " |  keyboardGrabber(...)\n",
      " |      keyboardGrabber() -> QWidget\n",
      " |  \n",
      " |  layout(...)\n",
      " |      layout(self) -> QLayout\n",
      " |  \n",
      " |  layoutDirection(...)\n",
      " |      layoutDirection(self) -> Qt.LayoutDirection\n",
      " |  \n",
      " |  leaveEvent(...)\n",
      " |      leaveEvent(self, QEvent)\n",
      " |  \n",
      " |  locale(...)\n",
      " |      locale(self) -> QLocale\n",
      " |  \n",
      " |  lower(...)\n",
      " |      lower(self)\n",
      " |  \n",
      " |  mapFrom(...)\n",
      " |      mapFrom(self, QWidget, QPoint) -> QPoint\n",
      " |  \n",
      " |  mapFromGlobal(...)\n",
      " |      mapFromGlobal(self, QPoint) -> QPoint\n",
      " |  \n",
      " |  mapFromParent(...)\n",
      " |      mapFromParent(self, QPoint) -> QPoint\n",
      " |  \n",
      " |  mapTo(...)\n",
      " |      mapTo(self, QWidget, QPoint) -> QPoint\n",
      " |  \n",
      " |  mapToGlobal(...)\n",
      " |      mapToGlobal(self, QPoint) -> QPoint\n",
      " |  \n",
      " |  mapToParent(...)\n",
      " |      mapToParent(self, QPoint) -> QPoint\n",
      " |  \n",
      " |  mask(...)\n",
      " |      mask(self) -> QRegion\n",
      " |  \n",
      " |  maximumHeight(...)\n",
      " |      maximumHeight(self) -> int\n",
      " |  \n",
      " |  maximumSize(...)\n",
      " |      maximumSize(self) -> QSize\n",
      " |  \n",
      " |  maximumWidth(...)\n",
      " |      maximumWidth(self) -> int\n",
      " |  \n",
      " |  metric(...)\n",
      " |      metric(self, QPaintDevice.PaintDeviceMetric) -> int\n",
      " |  \n",
      " |  minimumHeight(...)\n",
      " |      minimumHeight(self) -> int\n",
      " |  \n",
      " |  minimumSize(...)\n",
      " |      minimumSize(self) -> QSize\n",
      " |  \n",
      " |  minimumWidth(...)\n",
      " |      minimumWidth(self) -> int\n",
      " |  \n",
      " |  mouseGrabber(...)\n",
      " |      mouseGrabber() -> QWidget\n",
      " |  \n",
      " |  move(...)\n",
      " |      move(self, QPoint)\n",
      " |      move(self, int, int)\n",
      " |  \n",
      " |  moveEvent(...)\n",
      " |      moveEvent(self, QMoveEvent)\n",
      " |  \n",
      " |  nativeEvent(...)\n",
      " |      nativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int]\n",
      " |  \n",
      " |  nativeParentWidget(...)\n",
      " |      nativeParentWidget(self) -> QWidget\n",
      " |  \n",
      " |  nextInFocusChain(...)\n",
      " |      nextInFocusChain(self) -> QWidget\n",
      " |  \n",
      " |  normalGeometry(...)\n",
      " |      normalGeometry(self) -> QRect\n",
      " |  \n",
      " |  overrideWindowFlags(...)\n",
      " |      overrideWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType])\n",
      " |  \n",
      " |  overrideWindowState(...)\n",
      " |      overrideWindowState(self, Union[Qt.WindowStates, Qt.WindowState])\n",
      " |  \n",
      " |  paintEngine(...)\n",
      " |      paintEngine(self) -> QPaintEngine\n",
      " |  \n",
      " |  palette(...)\n",
      " |      palette(self) -> QPalette\n",
      " |  \n",
      " |  parentWidget(...)\n",
      " |      parentWidget(self) -> QWidget\n",
      " |  \n",
      " |  pos(...)\n",
      " |      pos(self) -> QPoint\n",
      " |  \n",
      " |  previousInFocusChain(...)\n",
      " |      previousInFocusChain(self) -> QWidget\n",
      " |  \n",
      " |  raise_(...)\n",
      " |      raise_(self)\n",
      " |  \n",
      " |  rect(...)\n",
      " |      rect(self) -> QRect\n",
      " |  \n",
      " |  releaseKeyboard(...)\n",
      " |      releaseKeyboard(self)\n",
      " |  \n",
      " |  releaseMouse(...)\n",
      " |      releaseMouse(self)\n",
      " |  \n",
      " |  releaseShortcut(...)\n",
      " |      releaseShortcut(self, int)\n",
      " |  \n",
      " |  removeAction(...)\n",
      " |      removeAction(self, QAction)\n",
      " |  \n",
      " |  render(...)\n",
      " |      render(self, QPaintDevice, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))\n",
      " |      render(self, QPainter, targetOffset: QPoint = QPoint(), sourceRegion: QRegion = QRegion(), flags: Union[QWidget.RenderFlags, QWidget.RenderFlag] = QWidget.RenderFlags(QWidget.DrawWindowBackground|QWidget.DrawChildren))\n",
      " |  \n",
      " |  repaint(...)\n",
      " |      repaint(self)\n",
      " |      repaint(self, int, int, int, int)\n",
      " |      repaint(self, QRect)\n",
      " |      repaint(self, QRegion)\n",
      " |  \n",
      " |  resize(...)\n",
      " |      resize(self, QSize)\n",
      " |      resize(self, int, int)\n",
      " |  \n",
      " |  restoreGeometry(...)\n",
      " |      restoreGeometry(self, Union[QByteArray, bytes, bytearray]) -> bool\n",
      " |  \n",
      " |  saveGeometry(...)\n",
      " |      saveGeometry(self) -> QByteArray\n",
      " |  \n",
      " |  scroll(...)\n",
      " |      scroll(self, int, int)\n",
      " |      scroll(self, int, int, QRect)\n",
      " |  \n",
      " |  setAcceptDrops(...)\n",
      " |      setAcceptDrops(self, bool)\n",
      " |  \n",
      " |  setAccessibleDescription(...)\n",
      " |      setAccessibleDescription(self, str)\n",
      " |  \n",
      " |  setAccessibleName(...)\n",
      " |      setAccessibleName(self, str)\n",
      " |  \n",
      " |  setAttribute(...)\n",
      " |      setAttribute(self, Qt.WidgetAttribute, on: bool = True)\n",
      " |  \n",
      " |  setAutoFillBackground(...)\n",
      " |      setAutoFillBackground(self, bool)\n",
      " |  \n",
      " |  setBackgroundRole(...)\n",
      " |      setBackgroundRole(self, QPalette.ColorRole)\n",
      " |  \n",
      " |  setBaseSize(...)\n",
      " |      setBaseSize(self, int, int)\n",
      " |      setBaseSize(self, QSize)\n",
      " |  \n",
      " |  setContentsMargins(...)\n",
      " |      setContentsMargins(self, int, int, int, int)\n",
      " |      setContentsMargins(self, QMargins)\n",
      " |  \n",
      " |  setContextMenuPolicy(...)\n",
      " |      setContextMenuPolicy(self, Qt.ContextMenuPolicy)\n",
      " |  \n",
      " |  setCursor(...)\n",
      " |      setCursor(self, Union[QCursor, Qt.CursorShape])\n",
      " |  \n",
      " |  setDisabled(...)\n",
      " |      setDisabled(self, bool)\n",
      " |  \n",
      " |  setEnabled(...)\n",
      " |      setEnabled(self, bool)\n",
      " |  \n",
      " |  setFixedHeight(...)\n",
      " |      setFixedHeight(self, int)\n",
      " |  \n",
      " |  setFixedSize(...)\n",
      " |      setFixedSize(self, QSize)\n",
      " |      setFixedSize(self, int, int)\n",
      " |  \n",
      " |  setFixedWidth(...)\n",
      " |      setFixedWidth(self, int)\n",
      " |  \n",
      " |  setFocus(...)\n",
      " |      setFocus(self)\n",
      " |      setFocus(self, Qt.FocusReason)\n",
      " |  \n",
      " |  setFocusPolicy(...)\n",
      " |      setFocusPolicy(self, Qt.FocusPolicy)\n",
      " |  \n",
      " |  setFocusProxy(...)\n",
      " |      setFocusProxy(self, QWidget)\n",
      " |  \n",
      " |  setFont(...)\n",
      " |      setFont(self, QFont)\n",
      " |  \n",
      " |  setForegroundRole(...)\n",
      " |      setForegroundRole(self, QPalette.ColorRole)\n",
      " |  \n",
      " |  setGeometry(...)\n",
      " |      setGeometry(self, QRect)\n",
      " |      setGeometry(self, int, int, int, int)\n",
      " |  \n",
      " |  setGraphicsEffect(...)\n",
      " |      setGraphicsEffect(self, QGraphicsEffect)\n",
      " |  \n",
      " |  setHidden(...)\n",
      " |      setHidden(self, bool)\n",
      " |  \n",
      " |  setInputMethodHints(...)\n",
      " |      setInputMethodHints(self, Union[Qt.InputMethodHints, Qt.InputMethodHint])\n",
      " |  \n",
      " |  setLayout(...)\n",
      " |      setLayout(self, QLayout)\n",
      " |  \n",
      " |  setLayoutDirection(...)\n",
      " |      setLayoutDirection(self, Qt.LayoutDirection)\n",
      " |  \n",
      " |  setLocale(...)\n",
      " |      setLocale(self, QLocale)\n",
      " |  \n",
      " |  setMask(...)\n",
      " |      setMask(self, QBitmap)\n",
      " |      setMask(self, QRegion)\n",
      " |  \n",
      " |  setMaximumHeight(...)\n",
      " |      setMaximumHeight(self, int)\n",
      " |  \n",
      " |  setMaximumSize(...)\n",
      " |      setMaximumSize(self, int, int)\n",
      " |      setMaximumSize(self, QSize)\n",
      " |  \n",
      " |  setMaximumWidth(...)\n",
      " |      setMaximumWidth(self, int)\n",
      " |  \n",
      " |  setMinimumHeight(...)\n",
      " |      setMinimumHeight(self, int)\n",
      " |  \n",
      " |  setMinimumSize(...)\n",
      " |      setMinimumSize(self, int, int)\n",
      " |      setMinimumSize(self, QSize)\n",
      " |  \n",
      " |  setMinimumWidth(...)\n",
      " |      setMinimumWidth(self, int)\n",
      " |  \n",
      " |  setMouseTracking(...)\n",
      " |      setMouseTracking(self, bool)\n",
      " |  \n",
      " |  setPalette(...)\n",
      " |      setPalette(self, QPalette)\n",
      " |  \n",
      " |  setParent(...)\n",
      " |      setParent(self, QWidget)\n",
      " |      setParent(self, QWidget, Union[Qt.WindowFlags, Qt.WindowType])\n",
      " |  \n",
      " |  setShortcutAutoRepeat(...)\n",
      " |      setShortcutAutoRepeat(self, int, enabled: bool = True)\n",
      " |  \n",
      " |  setShortcutEnabled(...)\n",
      " |      setShortcutEnabled(self, int, enabled: bool = True)\n",
      " |  \n",
      " |  setSizeIncrement(...)\n",
      " |      setSizeIncrement(self, int, int)\n",
      " |      setSizeIncrement(self, QSize)\n",
      " |  \n",
      " |  setSizePolicy(...)\n",
      " |      setSizePolicy(self, QSizePolicy)\n",
      " |      setSizePolicy(self, QSizePolicy.Policy, QSizePolicy.Policy)\n",
      " |  \n",
      " |  setStatusTip(...)\n",
      " |      setStatusTip(self, str)\n",
      " |  \n",
      " |  setStyle(...)\n",
      " |      setStyle(self, QStyle)\n",
      " |  \n",
      " |  setStyleSheet(...)\n",
      " |      setStyleSheet(self, str)\n",
      " |  \n",
      " |  setTabOrder(...)\n",
      " |      setTabOrder(QWidget, QWidget)\n",
      " |  \n",
      " |  setTabletTracking(...)\n",
      " |      setTabletTracking(self, bool)\n",
      " |  \n",
      " |  setToolTip(...)\n",
      " |      setToolTip(self, str)\n",
      " |  \n",
      " |  setToolTipDuration(...)\n",
      " |      setToolTipDuration(self, int)\n",
      " |  \n",
      " |  setUpdatesEnabled(...)\n",
      " |      setUpdatesEnabled(self, bool)\n",
      " |  \n",
      " |  setVisible(...)\n",
      " |      setVisible(self, bool)\n",
      " |  \n",
      " |  setWhatsThis(...)\n",
      " |      setWhatsThis(self, str)\n",
      " |  \n",
      " |  setWindowFilePath(...)\n",
      " |      setWindowFilePath(self, str)\n",
      " |  \n",
      " |  setWindowFlag(...)\n",
      " |      setWindowFlag(self, Qt.WindowType, on: bool = True)\n",
      " |  \n",
      " |  setWindowFlags(...)\n",
      " |      setWindowFlags(self, Union[Qt.WindowFlags, Qt.WindowType])\n",
      " |  \n",
      " |  setWindowIcon(...)\n",
      " |      setWindowIcon(self, QIcon)\n",
      " |  \n",
      " |  setWindowIconText(...)\n",
      " |      setWindowIconText(self, str)\n",
      " |  \n",
      " |  setWindowModality(...)\n",
      " |      setWindowModality(self, Qt.WindowModality)\n",
      " |  \n",
      " |  setWindowModified(...)\n",
      " |      setWindowModified(self, bool)\n",
      " |  \n",
      " |  setWindowOpacity(...)\n",
      " |      setWindowOpacity(self, float)\n",
      " |  \n",
      " |  setWindowRole(...)\n",
      " |      setWindowRole(self, str)\n",
      " |  \n",
      " |  setWindowState(...)\n",
      " |      setWindowState(self, Union[Qt.WindowStates, Qt.WindowState])\n",
      " |  \n",
      " |  setWindowTitle(...)\n",
      " |      setWindowTitle(self, str)\n",
      " |  \n",
      " |  sharedPainter(...)\n",
      " |      sharedPainter(self) -> QPainter\n",
      " |  \n",
      " |  show(...)\n",
      " |      show(self)\n",
      " |  \n",
      " |  showEvent(...)\n",
      " |      showEvent(self, QShowEvent)\n",
      " |  \n",
      " |  showFullScreen(...)\n",
      " |      showFullScreen(self)\n",
      " |  \n",
      " |  showMaximized(...)\n",
      " |      showMaximized(self)\n",
      " |  \n",
      " |  showMinimized(...)\n",
      " |      showMinimized(self)\n",
      " |  \n",
      " |  showNormal(...)\n",
      " |      showNormal(self)\n",
      " |  \n",
      " |  size(...)\n",
      " |      size(self) -> QSize\n",
      " |  \n",
      " |  sizeIncrement(...)\n",
      " |      sizeIncrement(self) -> QSize\n",
      " |  \n",
      " |  sizePolicy(...)\n",
      " |      sizePolicy(self) -> QSizePolicy\n",
      " |  \n",
      " |  stackUnder(...)\n",
      " |      stackUnder(self, QWidget)\n",
      " |  \n",
      " |  statusTip(...)\n",
      " |      statusTip(self) -> str\n",
      " |  \n",
      " |  style(...)\n",
      " |      style(self) -> QStyle\n",
      " |  \n",
      " |  styleSheet(...)\n",
      " |      styleSheet(self) -> str\n",
      " |  \n",
      " |  tabletEvent(...)\n",
      " |      tabletEvent(self, QTabletEvent)\n",
      " |  \n",
      " |  testAttribute(...)\n",
      " |      testAttribute(self, Qt.WidgetAttribute) -> bool\n",
      " |  \n",
      " |  toolTip(...)\n",
      " |      toolTip(self) -> str\n",
      " |  \n",
      " |  toolTipDuration(...)\n",
      " |      toolTipDuration(self) -> int\n",
      " |  \n",
      " |  underMouse(...)\n",
      " |      underMouse(self) -> bool\n",
      " |  \n",
      " |  ungrabGesture(...)\n",
      " |      ungrabGesture(self, Qt.GestureType)\n",
      " |  \n",
      " |  unsetCursor(...)\n",
      " |      unsetCursor(self)\n",
      " |  \n",
      " |  unsetLayoutDirection(...)\n",
      " |      unsetLayoutDirection(self)\n",
      " |  \n",
      " |  unsetLocale(...)\n",
      " |      unsetLocale(self)\n",
      " |  \n",
      " |  updateGeometry(...)\n",
      " |      updateGeometry(self)\n",
      " |  \n",
      " |  updateMicroFocus(...)\n",
      " |      updateMicroFocus(self)\n",
      " |  \n",
      " |  updatesEnabled(...)\n",
      " |      updatesEnabled(self) -> bool\n",
      " |  \n",
      " |  visibleRegion(...)\n",
      " |      visibleRegion(self) -> QRegion\n",
      " |  \n",
      " |  whatsThis(...)\n",
      " |      whatsThis(self) -> str\n",
      " |  \n",
      " |  width(...)\n",
      " |      width(self) -> int\n",
      " |  \n",
      " |  winId(...)\n",
      " |      winId(self) -> sip.voidptr\n",
      " |  \n",
      " |  window(...)\n",
      " |      window(self) -> QWidget\n",
      " |  \n",
      " |  windowFilePath(...)\n",
      " |      windowFilePath(self) -> str\n",
      " |  \n",
      " |  windowFlags(...)\n",
      " |      windowFlags(self) -> Qt.WindowFlags\n",
      " |  \n",
      " |  windowHandle(...)\n",
      " |      windowHandle(self) -> QWindow\n",
      " |  \n",
      " |  windowIcon(...)\n",
      " |      windowIcon(self) -> QIcon\n",
      " |  \n",
      " |  windowIconChanged = <unbound PYQT_SIGNAL windowIconChanged(QIcon)>\n",
      " |  windowIconText(...)\n",
      " |      windowIconText(self) -> str\n",
      " |  \n",
      " |  windowIconTextChanged = <unbound PYQT_SIGNAL windowIconTextChanged(QString)>\n",
      " |  windowModality(...)\n",
      " |      windowModality(self) -> Qt.WindowModality\n",
      " |  \n",
      " |  windowOpacity(...)\n",
      " |      windowOpacity(self) -> float\n",
      " |  \n",
      " |  windowRole(...)\n",
      " |      windowRole(self) -> str\n",
      " |  \n",
      " |  windowState(...)\n",
      " |      windowState(self) -> Qt.WindowStates\n",
      " |  \n",
      " |  windowTitle(...)\n",
      " |      windowTitle(self) -> str\n",
      " |  \n",
      " |  windowTitleChanged = <unbound PYQT_SIGNAL windowTitleChanged(QString)>\n",
      " |  windowType(...)\n",
      " |      windowType(self) -> Qt.WindowType\n",
      " |  \n",
      " |  x(...)\n",
      " |      x(self) -> int\n",
      " |  \n",
      " |  y(...)\n",
      " |      y(self) -> int\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes inherited from QWidget:\n",
      " |  \n",
      " |  DrawChildren = 2\n",
      " |  \n",
      " |  DrawWindowBackground = 1\n",
      " |  \n",
      " |  IgnoreMask = 4\n",
      " |  \n",
      " |  RenderFlag = <class 'PyQt5.QtWidgets.QWidget.RenderFlag'>\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  RenderFlags = <class 'PyQt5.QtWidgets.RenderFlags'>\n",
      " |      QWidget.RenderFlags()\n",
      " |      QWidget.RenderFlags(Union[QWidget.RenderFlags, QWidget.RenderFlag])\n",
      " |      QWidget.RenderFlags(QWidget.RenderFlags)\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from PyQt5.QtCore.QObject:\n",
      " |  \n",
      " |  __getattr__(...)\n",
      " |      __getattr__(self, str) -> object\n",
      " |  \n",
      " |  blockSignals(...)\n",
      " |      blockSignals(self, bool) -> bool\n",
      " |  \n",
      " |  childEvent(...)\n",
      " |      childEvent(self, QChildEvent)\n",
      " |  \n",
      " |  children(...)\n",
      " |      children(self) -> object\n",
      " |  \n",
      " |  connectNotify(...)\n",
      " |      connectNotify(self, QMetaMethod)\n",
      " |  \n",
      " |  customEvent(...)\n",
      " |      customEvent(self, QEvent)\n",
      " |  \n",
      " |  deleteLater(...)\n",
      " |      deleteLater(self)\n",
      " |  \n",
      " |  destroyed = <unbound PYQT_SIGNAL destroyed(QObject*)>\n",
      " |  disconnect(...)\n",
      " |      disconnect(self)\n",
      " |  \n",
      " |  disconnectNotify(...)\n",
      " |      disconnectNotify(self, QMetaMethod)\n",
      " |  \n",
      " |  dumpObjectInfo(...)\n",
      " |      dumpObjectInfo(self)\n",
      " |  \n",
      " |  dumpObjectTree(...)\n",
      " |      dumpObjectTree(self)\n",
      " |  \n",
      " |  dynamicPropertyNames(...)\n",
      " |      dynamicPropertyNames(self) -> object\n",
      " |  \n",
      " |  findChild(...)\n",
      " |      findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject\n",
      " |      findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject\n",
      " |  \n",
      " |  findChildren(...)\n",
      " |      findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]\n",
      " |      findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]\n",
      " |      findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]\n",
      " |      findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]\n",
      " |      findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]\n",
      " |      findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]\n",
      " |  \n",
      " |  inherits(...)\n",
      " |      inherits(self, str) -> bool\n",
      " |  \n",
      " |  installEventFilter(...)\n",
      " |      installEventFilter(self, QObject)\n",
      " |  \n",
      " |  isSignalConnected(...)\n",
      " |      isSignalConnected(self, QMetaMethod) -> bool\n",
      " |  \n",
      " |  isWidgetType(...)\n",
      " |      isWidgetType(self) -> bool\n",
      " |  \n",
      " |  isWindowType(...)\n",
      " |      isWindowType(self) -> bool\n",
      " |  \n",
      " |  killTimer(...)\n",
      " |      killTimer(self, int)\n",
      " |  \n",
      " |  metaObject(...)\n",
      " |      metaObject(self) -> QMetaObject\n",
      " |  \n",
      " |  moveToThread(...)\n",
      " |      moveToThread(self, QThread)\n",
      " |  \n",
      " |  objectName(...)\n",
      " |      objectName(self) -> str\n",
      " |  \n",
      " |  objectNameChanged = <unbound PYQT_SIGNAL objectNameChanged(QString)>\n",
      " |  parent(...)\n",
      " |      parent(self) -> QObject\n",
      " |  \n",
      " |  property(...)\n",
      " |      property(self, str) -> Any\n",
      " |  \n",
      " |  pyqtConfigure(...)\n",
      " |      QObject.pyqtConfigure(...)\n",
      " |      \n",
      " |      Each keyword argument is either the name of a Qt property or a Qt signal.\n",
      " |      For properties the property is set to the given value which should be of an\n",
      " |      appropriate type.\n",
      " |      For signals the signal is connected to the given value which should be a\n",
      " |      callable.\n",
      " |  \n",
      " |  receivers(...)\n",
      " |      receivers(self, PYQT_SIGNAL) -> int\n",
      " |  \n",
      " |  removeEventFilter(...)\n",
      " |      removeEventFilter(self, QObject)\n",
      " |  \n",
      " |  sender(...)\n",
      " |      sender(self) -> QObject\n",
      " |  \n",
      " |  senderSignalIndex(...)\n",
      " |      senderSignalIndex(self) -> int\n",
      " |  \n",
      " |  setObjectName(...)\n",
      " |      setObjectName(self, str)\n",
      " |  \n",
      " |  setProperty(...)\n",
      " |      setProperty(self, str, Any) -> bool\n",
      " |  \n",
      " |  signalsBlocked(...)\n",
      " |      signalsBlocked(self) -> bool\n",
      " |  \n",
      " |  startTimer(...)\n",
      " |      startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int\n",
      " |  \n",
      " |  thread(...)\n",
      " |      thread(self) -> QThread\n",
      " |  \n",
      " |  tr(...)\n",
      " |      tr(self, str, disambiguation: str = None, n: int = -1) -> str\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors inherited from PyQt5.QtCore.QObject:\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes inherited from PyQt5.QtCore.QObject:\n",
      " |  \n",
      " |  staticMetaObject = <PyQt5.QtCore.QMetaObject object>\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from PyQt5.QtGui.QPaintDevice:\n",
      " |  \n",
      " |  colorCount(...)\n",
      " |      colorCount(self) -> int\n",
      " |  \n",
      " |  depth(...)\n",
      " |      depth(self) -> int\n",
      " |  \n",
      " |  devicePixelRatio(...)\n",
      " |      devicePixelRatio(self) -> int\n",
      " |  \n",
      " |  devicePixelRatioF(...)\n",
      " |      devicePixelRatioF(self) -> float\n",
      " |  \n",
      " |  devicePixelRatioFScale(...)\n",
      " |      devicePixelRatioFScale() -> float\n",
      " |  \n",
      " |  heightMM(...)\n",
      " |      heightMM(self) -> int\n",
      " |  \n",
      " |  logicalDpiX(...)\n",
      " |      logicalDpiX(self) -> int\n",
      " |  \n",
      " |  logicalDpiY(...)\n",
      " |      logicalDpiY(self) -> int\n",
      " |  \n",
      " |  paintingActive(...)\n",
      " |      paintingActive(self) -> bool\n",
      " |  \n",
      " |  physicalDpiX(...)\n",
      " |      physicalDpiX(self) -> int\n",
      " |  \n",
      " |  physicalDpiY(...)\n",
      " |      physicalDpiY(self) -> int\n",
      " |  \n",
      " |  widthMM(...)\n",
      " |      widthMM(self) -> int\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes inherited from PyQt5.QtGui.QPaintDevice:\n",
      " |  \n",
      " |  PaintDeviceMetric = <class 'PyQt5.QtGui.QPaintDevice.PaintDeviceMetric...\n",
      " |      int(x=0) -> integer\n",
      " |      int(x, base=10) -> integer\n",
      " |      \n",
      " |      Convert a number or string to an integer, or return 0 if no arguments\n",
      " |      are given.  If x is a number, return x.__int__().  For floating point\n",
      " |      numbers, this truncates towards zero.\n",
      " |      \n",
      " |      If x is not a number or if base is given, then x must be a string,\n",
      " |      bytes, or bytearray instance representing an integer literal in the\n",
      " |      given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
      " |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
      " |      Base 0 means to interpret the base from the string as an integer literal.\n",
      " |      >>> int('0b100', base=0)\n",
      " |      4\n",
      " |  \n",
      " |  PdmDepth = 6\n",
      " |  \n",
      " |  PdmDevicePixelRatio = 11\n",
      " |  \n",
      " |  PdmDevicePixelRatioScaled = 12\n",
      " |  \n",
      " |  PdmDpiX = 7\n",
      " |  \n",
      " |  PdmDpiY = 8\n",
      " |  \n",
      " |  PdmHeight = 2\n",
      " |  \n",
      " |  PdmHeightMM = 4\n",
      " |  \n",
      " |  PdmNumColors = 5\n",
      " |  \n",
      " |  PdmPhysicalDpiX = 9\n",
      " |  \n",
      " |  PdmPhysicalDpiY = 10\n",
      " |  \n",
      " |  PdmWidth = 1\n",
      " |  \n",
      " |  PdmWidthMM = 3\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from sip.simplewrapper:\n",
      " |  \n",
      " |  __init__(self, /, *args, **kwargs)\n",
      " |      Initialize self.  See help(type(self)) for accurate signature.\n",
      " |  \n",
      " |  __new__(*args, **kwargs) from sip.wrappertype\n",
      " |      Create and return a new object.  See help(type) for accurate signature.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors inherited from sip.simplewrapper:\n",
      " |  \n",
      " |  __dict__\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(QTreeView)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
